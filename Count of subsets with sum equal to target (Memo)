int subset_sum(vector<int>& arr, int idx, int target, vector<vector<int>>& dp){
    if (idx == arr.size()) return target == 0 ? 1 : 0;

    if (dp[idx][target] != -1) return dp[idx][target];

    int ans = 0;
    if (target - arr[idx] >= 0)
        ans += subset_sum(arr, idx + 1, target - arr[idx], dp);

    ans += subset_sum(arr, idx + 1, target, dp);

    return dp[idx][target] = ans;
}
int perfectSum(vector<int>& arr, int target) {
    int n = arr.size(), count = 0;
    vector<vector<int>> dp(n+1, vector<int> (target + 1, -1));
    return subset_sum(arr, 0, target, dp);
    // return count;
}
