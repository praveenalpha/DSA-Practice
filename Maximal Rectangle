class Solution {
public:
    int largestAreaHistogram(vector<int>& arr, int n){
        stack<int> st;
        st.push(-1);
        st.push(0);
        int ans = 0;

        for(int i=1;i<n;i++){
            while(st.top() != -1 && arr[st.top()] >= arr[i]){
                int ri = i, cv = arr[st.top()];
                st.pop();
                int li = st.top();
                ans = max(ans, cv * (ri - li - 1));
            }
            st.push(i);
        }
        while(st.top() != -1){
            int ri = n, cv = arr[st.top()];
            st.pop();
            int li = st.top();
            ans = max(ans, cv * (ri - li - 1));
        }
        return ans;
    }
    int maximalRectangle(vector<vector<char>>& mat) {
        vector<vector<int>> arr;
        for(auto row : mat){
            vector<int> temp;
            for(auto col : row){
                if(col == '0')  temp.push_back(0);
                else    temp.push_back(1);
            }
            arr.push_back(temp);
        }
        int rows = arr.size(), cols = arr[0].size(), ans = largestAreaHistogram(arr[0], cols);
        vector<int> temp = arr[0];

        for(int i=1;i<rows;i++){
            for(int j=0;j<cols;j++){
                temp[j] = arr[i][j] == 0 ? 0 : temp[j]+1;
                cout<<temp[j]<<" ";
            }
            cout<<endl;
            int temp_ans = largestAreaHistogram(temp, cols);
            cout<<temp_ans<<endl;
            ans = max(ans, temp_ans);
        }

        return ans;
    }
};
