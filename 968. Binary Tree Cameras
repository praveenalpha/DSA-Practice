/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
//  -1: I need a camera
//  0 : I am a camera
//  1: I am covered by a camera
class Solution {
public:
    int calc(TreeNode* root, int& ans){
        if(root == nullptr) return 1;
        int la = calc(root->left, ans);
        int ra = calc(root->right, ans);
        if(la == -1 || ra == -1){
            ans++;
            return 0;
        }    
        if(la == 0 || ra == 0)  return 1;
        return -1;
    }
    int minCameraCover(TreeNode* root) {
        int ans = 0;
        return calc(root, ans) == -1 ? ans+1 : ans;
    }
};
