


class Solution {
  public:
    vector<vector<int>> dp;
    map<pair<int,int>, set<string>> memo;

    set<string> collect(int i, int j, string &s1, string &s2) {
        if (i == 0 || j == 0) return {""};
        if (memo.count({i,j})) return memo[{i,j}];

        set<string> ans;
        if (s1[i-1] == s2[j-1]) {
            auto prev = collect(i-1, j-1, s1, s2);
            for (auto &str : prev) ans.insert(str + s1[i-1]);
        } else {
            if (dp[i-1][j] == dp[i][j]) {
                auto top = collect(i-1, j, s1, s2);
                ans.insert(top.begin(), top.end());
            }
            if (dp[i][j-1] == dp[i][j]) {
                auto left = collect(i, j-1, s1, s2);
                ans.insert(left.begin(), left.end());
            }
        }
        return memo[{i,j}] = ans;
    }

    vector<string> allLCS(string &s1, string &s2) {
        int n1 = s1.size(), n2 = s2.size();
        dp.assign(n1+1, vector<int>(n2+1, 0));

        // Build LCS length DP
        for (int i=1;i<=n1;i++){
            for (int j=1;j<=n2;j++){
                if (s1[i-1] == s2[j-1])
                    dp[i][j] = 1 + dp[i-1][j-1];
                else
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
            }
        }

        int L = dp[n1][n2];

        set<string> result = collect(n1, n2, s1, s2);

        // keep only length = L
        vector<string> ans;
        for (auto &s : result) {
            if ((int)s.size() == L) ans.push_back(s);
        }
        sort(ans.begin(), ans.end());
        return ans;
    }
};
