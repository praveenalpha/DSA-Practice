class Solution {
public:
    int buy_sell_2(vector<int>& arr, int can_buy, int idx, int n, vector<vector<int>>& dp){
        if(idx == n)    return dp[idx][can_buy] = 0;
        int profit = 0;
        if(dp[idx][can_buy] != -1)  return dp[idx][can_buy];
        if(can_buy == 1){
            profit = max(buy_sell_2(arr, 0, idx+1, n, dp) - arr[idx], buy_sell_2(arr, 1, idx+1, n, dp));
        }
        else profit = max(buy_sell_2(arr, 1, idx+1, n, dp) + arr[idx], buy_sell_2(arr, 0, idx+1, n, dp));
        return dp[idx][can_buy] = profit;
    }
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> dp(n+1, vector<int> (2, -1));
        return buy_sell_2(prices, true, 0, n, dp);
    }
};
