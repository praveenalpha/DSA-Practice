string backtrack(int i, int j, string&s1, string& s2, vector<vector<int>>& dp) {
        string ans = "";
        while(i >= 0 && j >= 0){
            if(s1[i] == s2[j]){
                ans += s1[i];
                i--;
                j--;
            }
            else if(dp[i-1][j] > dp[i][j-1])
                i--;
            else
                j--;
        }
        return ans;
    }

    vector<string> allLCS(string &s1, string &s2) {
        int n1 = s1.length(), n2 = s2.length();
        vector<vector<int>> dp(n1+1, vector<int> (n2+1));
        for(int i=1;i<=n1;i++){
            for(int j=1;j<=n2;j++){
                if(s1[i-1] == s2[j-1])
                    dp[i][j] = 1 + dp[i-1][j-1];
                else
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
            }
        }
        
        vector<string> ans;
        ans.push_back(backtrack(n1-1, n2-1, s1, s2, dp));
        return ans;
    }
